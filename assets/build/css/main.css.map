{"version":3,"file":"css/main.css","mappings":";;;;AACA,6BAA6B;AAC7B;EACE,uBAAuB;EACvB,kBAAkB;EAClB,gBAAgB;EAChB,4CAAmD,EAAE,qBAAqB;EAC1E;;;;;4DAK0E,EAAE,eAAe;AAC7F;;AAEA,yBAAyB;AACzB;EACE,uBAAuB;EACvB,kBAAkB;EAClB,gBAAgB;EAChB,4CAA+C,EAAE,qBAAqB;EACtE;;;;;6DAKsE,EAAE,eAAe;AACzF;;AAEA,4BAA4B;AAC5B;EACE,uBAAuB;EACvB,kBAAkB;EAClB,gBAAgB;EAChB,6CAAkD,EAAE,qBAAqB;EACzE;;;;;6DAKyE,EAAE,eAAe;AAC5F;;AAEA,+BAA+B;AAC/B;EACE,uBAAuB;EACvB,kBAAkB;EAClB,gBAAgB;EAChB,6CAAqD,EAAE,qBAAqB;EAC5E;;;;;6DAK4E,EAAE,eAAe;AAC/F,C;;;;ACvDA;;CCGC;ACHD;;CDMC;AEFD;;;;EFOE;AGXF;EACC,SAAS;EDAT,mCDIkC;ECuB9B,eD4Ea;EC3Eb,gBD4Ec;EEpGlB,mBJDsB;EIEtB,qBAAqB;EC2Od;IDjPR;MDwBM,eDoFY;MCnFZ,gBDoFa,IEtGlB;EC0OO;IDjPR;MDwBM,eDwFY;MCvFZ,gBDwFa,IE1GlB;;AAED;EACI,yBJDqB;EIErB,0BAA0B;;AAG9B;EACC,YAAY;EACZ,WAAW;;AAGZ;EACC,SAAS;EACT,kBAAkB;EAChB,qBAAqB;EACrB,qBAAqB;;AAGxB;EACI,YAAY;EAAE;EACd,WAAW;EAAE,2CAA0C;;AAK3D;EDLK,eDRa;ECSb,gBDRc;EG4NX;IDhNR;MDTM,eDAY;MCCZ,gBDAa,IEUlB;EC8MO;IDhNR;MDTM,eDIY;MCHZ,gBDIa,IEMlB;;AAED;EDTK,eDMa;ECLb,gBDMc;EG8MX;ID5MR;MDbM,eDcY;MCbZ,gBDca,IEAlB;EC0MO;ID5MR;MDbM,eDkBY;MCjBZ,gBDkBa,IEJlB;;AAED;EDbK,eDoBa;ECnBb,gBDoBc;EGgMX;IDxMR;MDjBM,eD4BY;MC3BZ,gBD4Ba,IEVlB;ECsMO;IDxMR;MDjBM,eDgCY;MC/BZ,gBDgCa,IEdlB;;AAED;EDjBK,eDkCa;ECjCb,gBDkCc;EGkLX;IDpMR;MDrBM,eD0CY;MCzCZ,gBD0Ca,IEpBlB;ECkMO;IDpMR;MDrBM,eD8CY;MC7CZ,gBD8Ca,IExBlB;;AAED;EDrBK,eDgDa;EC/Cb,gBDgDc;EGoKX;IDhMR;MDzBM,eDwDY;MCvDZ,gBDwDa,IE9BlB;EC8LO;IDhMR;MDzBM,eD4DY;MC3DZ,gBD4Da,IElClB;;AAED;EDzBK,eD8Da;EC7Db,gBD8Dc;EGsJX;ID5LR;MD7BM,eDsEY;MCrEZ,gBDsEa,IExClB;EC0LO;ID5LR;MD7BM,eD0EY;MCzEZ,gBD0Ea,IE5ClB;;AAED;;;;;;EAMC,cAAc;EACd,kCAAkC;;AEhEnC;;4BLmI4B;AMlI5B;AAEA;ACAA;EACC,cAAc;;AAGf;EAEE,gBAAgB;;AAKlB;EAEI,yBRN2B;EQO9B,eAAe;EAHhB;IAME,cAAc;IACd,qBAAqB;EAPvB;IAWE,yBRlBqB;EQOvB;IAeE,WAAW;IACX,yBR1BqB;IQ2BrB,WAAW;EAjBb;IAqBE,yBRxBwB;;ASR1B;EACI,kBAAkB;EACrB,mBTQmB;ESPnB,6BTOmB;ESVpB;IAMQ,qBAAqB;IAN7B;MASY,gBAAgB;MACnB,8BTEW;MSDX,cTVc;MSWd,gBAAgB;MAZzB;QAegB,cAAc;QACjB,eAAe;QACf,cTVkB;QSWlB,gBAAgB;QAChB,iBAAiB;IAnB9B;MAwBY,kBAAkB;;AAM9B;EACI,yBT9BmB;ES+BnB,YAAY;EACZ,cTvBgB;ESwBhB,kBAAkB;EAClB,yBAAyB;EACzB,kBAAkB;EAClB,6EAAuE;EAP3E;IAUQ,yBTrCoB;ISsCpB,gFAA0E;;AC5ClF;AACA;EACI,aAAa;;AL+OT;EMjPR;IAEE,YAAY,IAEb;;ACJD;;;;EXuME","sources":["webpack://lnpedia/./src/library/fonts/fonts.css","webpack://lnpedia/./src/sass/0-settings/_colors.scss","webpack://lnpedia/./src/sass/main.scss","webpack://lnpedia/./src/sass/0-settings/_typography.scss","webpack://lnpedia/./src/sass/1-tools/_mixins.scss","webpack://lnpedia/./src/sass/2-generic/_elements.scss","webpack://lnpedia/./node_modules/sass-mq/_mq.scss","webpack://lnpedia/./src/sass/2-generic/_icons.scss","webpack://lnpedia/./src/sass/2-generic/_buttons.scss","webpack://lnpedia/./src/sass/4-layouts/_nav.scss","webpack://lnpedia/./src/sass/4-layouts/_error.scss","webpack://lnpedia/./src/sass/4-layouts/posts/_meta.scss","webpack://lnpedia/./src/sass/4-layouts/posts/_post-card.scss","webpack://lnpedia/./src/sass/4-layouts/posts/_pagination.scss"],"sourcesContent":["\r\n/* overpass-regular - latin */\r\n@font-face {\r\n  font-family: 'Overpass';\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  src: url('overpass/overpass-v12-latin-regular.eot'); /* IE9 Compat Modes */\r\n  src: local('Overpass'), local('Overpass-Regular'),\r\n       url('overpass/overpass-v12-latin-regular.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */\r\n       url('overpass/overpass-v12-latin-regular.woff2') format('woff2'), /* Super Modern Browsers */\r\n       url('overpass/overpass-v12-latin-regular.woff') format('woff'), /* Modern Browsers */\r\n       url('overpass/overpass-v12-latin-regular.ttf') format('truetype'), /* Safari, Android, iOS */\r\n       url('overpass/overpass-v12-latin-regular.svg#Overpass') format('svg'); /* Legacy iOS */\r\n}\r\n\r\n/* overpass-600 - latin */\r\n@font-face {\r\n  font-family: 'Overpass';\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  src: url('overpass/overpass-v12-latin-600.eot'); /* IE9 Compat Modes */\r\n  src: local('Overpass'), local('Overpass-Light-Bold'),\r\n       url('overpass/overpass-v12-latin-600.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */\r\n       url('overpass/overpass-v12-latin-600.woff2') format('woff2'), /* Super Modern Browsers */\r\n       url('overpass/overpass-v12-latin-600.woff') format('woff'), /* Modern Browsers */\r\n       url('overpass/overpass-v12-latin-600.ttf') format('truetype'), /* Safari, Android, iOS */\r\n       url('overpass/overpass-v12-latin-600.svg#Overpass') format('svg'); /* Legacy iOS */\r\n}\r\n\r\n/* overpass-italic - latin */\r\n@font-face {\r\n  font-family: 'Overpass';\r\n  font-style: italic;\r\n  font-weight: 400;\r\n  src: url('overpass/overpass-v12-latin-italic.eot'); /* IE9 Compat Modes */\r\n  src: local('Overpass'), local('Overpass-Itallic'),\r\n       url('overpass/overpass-v12-latin-italic.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */\r\n       url('overpass/overpass-v12-latin-italic.woff2') format('woff2'), /* Super Modern Browsers */\r\n       url('overpass/overpass-v12-latin-italic.woff') format('woff'), /* Modern Browsers */\r\n       url('overpass/overpass-v12-latin-italic.ttf') format('truetype'), /* Safari, Android, iOS */\r\n       url('overpass/overpass-v12-latin-italic.svg#Overpass') format('svg'); /* Legacy iOS */\r\n}\r\n\r\n/* overpass-600italic - latin */\r\n@font-face {\r\n  font-family: 'Overpass';\r\n  font-style: italic;\r\n  font-weight: 600;\r\n  src: url('overpass/overpass-v12-latin-600italic.eot'); /* IE9 Compat Modes */\r\n  src: local('Overpass'), local('Overpass-Light-Bold-Itallic'),\r\n       url('overpass/overpass-v12-latin-600italic.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */\r\n       url('overpass/overpass-v12-latin-600italic.woff2') format('woff2'), /* Super Modern Browsers */\r\n       url('overpass/overpass-v12-latin-600italic.woff') format('woff'), /* Modern Browsers */\r\n       url('overpass/overpass-v12-latin-600italic.ttf') format('truetype'), /* Safari, Android, iOS */\r\n       url('overpass/overpass-v12-latin-600italic.svg#Overpass') format('svg'); /* Legacy iOS */\r\n}","/**\n* Color Definitions\n*/\n\n$theme-primary: #387ef2;\n\n$theme-primary-dark: #3344d9;\n$purple-social: #6351ce;\n\n$main-background: #edf1f5;\n$light-dark-background: #1d2327;\n$black-background: #171C1F;\n\n$white-text: #ffffff;\n\n$shadow-color: #3333;\n","// Essentials.\n@import \"essentials\";\n\n// Generic\n@import \"2-generic/generic\";\n\n//Import the Folders\n@import \"4-layouts/layouts\";\n","/**\n* Topography Definitions\n*/\n\n// Global theme font.\n$font__main: 'Overpass', sans-serif;\n\n// Global code font for pre/code element (Preferably Monospace)\n$font__code: 'Overpass', sans-serif;\n\n// Fallback font when font is not loaded via WebFonts JS.\n$font__fallback: sans-serif;\n\n// Base line height.\n$font__base-line-height: 30px;\n\n//Text Topography\n$body-text: (\n\t\"h1\": ( //H1 Heading\n\t\t\"small\": (\n\t\t\tfont-size: 26px,\n\t\t\tline-height: 1.4,\n\t\t),\n\t\t\"medium\": (\n\t\t\tfont-size: 28px,\n\t\t\tline-height: 1.5,\n\t\t),\n\t\t\"large\": (\n\t\t\tfont-size: 30px,\n\t\t\tline-height: 1.5,\n\t\t),\n\t),\n\t\"h2\": ( //H2 Heading\n\t\t\"small\": (\n\t\t\tfont-size: 22px,\n\t\t\tline-height: 1.4,\n\t\t),\n\t\t\"medium\": (\n\t\t\tfont-size: 24px,\n\t\t\tline-height: 1.5,\n\t\t),\n\t\t\"large\": (\n\t\t\tfont-size: 26px,\n\t\t\tline-height: 1.5,\n\t\t),\n\t),\n\t\"h3\": ( //H3 Heading\n\t\t\"small\": (\n\t\t\tfont-size: 18px,\n\t\t\tline-height: 1.4,\n\t\t),\n\t\t\"medium\": (\n\t\t\tfont-size: 20px,\n\t\t\tline-height: 1.5,\n\t\t),\n\t\t\"large\": (\n\t\t\tfont-size: 22px,\n\t\t\tline-height: 1.5,\n\t\t),\n\t),\n\t\"h4\": ( //H4 Heading\n\t\t\"small\": (\n\t\t\tfont-size: 16px,\n\t\t\tline-height: 1.4,\n\t\t),\n\t\t\"medium\": (\n\t\t\tfont-size: 18px,\n\t\t\tline-height: 1.5,\n\t\t),\n\t\t\"large\": (\n\t\t\tfont-size: 20px,\n\t\t\tline-height: 1.5,\n\t\t),\n\t),\n\t\"h5\": ( //H5 Heading\n\t\t\"small\": (\n\t\t\tfont-size: 14px,\n\t\t\tline-height: 1.4,\n\t\t),\n\t\t\"medium\": (\n\t\t\tfont-size: 16px,\n\t\t\tline-height: 1.5,\n\t\t),\n\t\t\"large\": (\n\t\t\tfont-size: 18px,\n\t\t\tline-height: 1.5,\n\t\t),\n\t),\n\t\"h6\": ( //H6 Heading\n\t\t\"small\": (\n\t\t\tfont-size: 12px,\n\t\t\tline-height: 1.4,\n\t\t),\n\t\t\"medium\": (\n\t\t\tfont-size: 14px,\n\t\t\tline-height: 1.5,\n\t\t),\n\t\t\"large\": (\n\t\t\tfont-size: 16px,\n\t\t\tline-height: 1.5,\n\t\t),\n\t),\n\t\"body\": ( //Body Content size\n\t\t\"small\": ( //Small Screen Size\n\t\t\tfont-size: 16px,\n\t\t\tline-height: 1.4,\n\t\t),\n\t\t\"medium\": ( //Medium Screen Size\n\t\t\tfont-size: 16px,\n\t\t\tline-height: 1.4,\n\t\t),\n\t\t\"large\": ( //Large Screen Size\n\t\t\tfont-size: 18px,\n\t\t\tline-height: 1.5,\n\t\t),\n\t),\n);\n","@mixin font-family( $font: $font__main ) {\n\tfont-family: $font__main;\n}\n\n/**\n * Add font scale with media query as per configuration on $body-text\n * Ex: @include body-text( h1 );\n * This will add font-size and line-height with different breakpoints.\n */\n \n@mixin body-text( $level: normal, $body-text: $body-text, $device-size: false ) {\n\t@if type-of($body-text) != \"map\" {\n\t\t@error \"`#{$body-text}` is not a valid value for $values. It must be a list.\";\n\t}\n\n\t$size: map_get($body-text, $level);\n\n\t@if type-of($size) == \"map\" {\n\n\t\t@if $device-size == false {\n\t\t\t@each $device, $values in $size {\n\n\t\t\t\t@if $device != \"small\" {\n\t\t\t\t\t@include mq($from: $device) {\n\t\t\t\t\t\tfont-size: map_get($values, \"font-size\");\n\t\t\t\t\t\tline-height: map_get($values, \"line-height\");\n\t\t\t\t\t}\n\t\t\t\t} @else {\n\t\t\t\t\tfont-size: map_get($values, \"font-size\");\n\t\t\t\t\tline-height: map_get($values, \"line-height\");\n\t\t\t\t}\n\t\t\t}\n\t\t} @else {\n\t\t\t$device_values: map_get($size, $device-size);\n\n\t\t\tfont-size: map_get($device_values, \"font-size\");\n\t\t\tline-height: map_get($device_values, \"line-height\");\n\t\t}\n\t}\n}\n","body {\n\tmargin: 0; //Remove Margin\n\t@include font-family();\n\t@include body-text( body );\n\n\tbackground: $theme-primary; //Primary Background Color\n\tword-wrap: break-word; //Break word when overflow\n}\n\nmain { //Main Element\n    background-color: $main-background; //Main Background Color\n    padding: 8px 12px 8px 12px; //Padding for the Main\n}\n\nimg { //Image Element\n\theight: auto; //Auto Resize Image height\n\twidth: 100%; //Full Div Width\n}\n\nbutton { //Button Element\n\tmargin: 0; //Remove the margin\n\ttext-align: center; //Center Align the text\n  \ttext-decoration: none; //Remove Text Decoration\n  \tdisplay: inline-block; //Inline Block\n}\n\n.row { //Row Element\n    padding: 0px; /*Remove the default Bootstrap 5 Margin*/\n    margin: 0px; /*Remove the default Bootstrap 5 Padding*/\n}\n\n//Topography\n\nh1 {\n\t@include body-text( h1 )\n}\n\nh2 {\n\t@include body-text( h2 )\n}\n\nh3 {\n\t@include body-text( h3 )\n}\n\nh4 {\n\t@include body-text( h4 )\n}\n\nh5 {\n\t@include body-text( h5 )\n}\n\nh6 {\n\t@include body-text( h6 )\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n\tmargin: 10px 0;\n\ttext-rendering: optimizelegibility;\n}","@charset \"UTF-8\"; // Fixes an issue where Ruby locale is not set properly\n                  // See https://github.com/sass-mq/sass-mq/pull/10\n\n/// Base font size on the `<body>` element\n///\n/// Do not override this value, or things will break\n///\n/// @link https://github.com/sass-mq/sass-mq/issues/122\n/// @deprecated This setting will be removed in sass-mq v6.0.0\n/// @access private\n/// @type Number (unit)\n$mq-base-font-size: 16px !default;\n\n/// Responsive mode\n///\n/// Set to `false` to enable support for browsers that do not support @media queries,\n/// (IE <= 8, Firefox <= 3, Opera <= 9)\n///\n/// You could create a stylesheet served exclusively to older browsers,\n/// where @media queries are rasterized\n///\n/// @example scss\n///  // old-ie.scss\n///  $mq-responsive: false;\n///  @import 'main'; // @media queries in this file will be rasterized up to $mq-static-breakpoint\n///                   // larger breakpoints will be ignored\n///\n/// @type Boolean\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-off Disabled responsive mode documentation\n$mq-responsive: true !default;\n\n/// Breakpoint list\n///\n/// Name your breakpoints in a way that creates a ubiquitous language\n/// across team members. It will improve communication between\n/// stakeholders, designers, developers, and testers.\n///\n/// @type Map\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples\n$mq-breakpoints: (\n    mobile:  320px,\n    tablet:  740px,\n    desktop: 980px,\n    wide:    1300px\n) !default;\n\n/// Static breakpoint (for fixed-width layouts)\n///\n/// Define the breakpoint from $mq-breakpoints that should\n/// be used as the target width for the fixed-width layout\n/// (i.e. when $mq-responsive is set to 'false') in a old-ie.scss\n///\n/// @example scss\n///  // tablet-only.scss\n///  //\n///  // Ignore all styles above tablet breakpoint,\n///  // and fix the styles (such as the layout) at tablet width\n///  $mq-responsive: false;\n///  $mq-static-breakpoint: tablet;\n///  @import 'main'; // @media queries in this file will be rasterized up to tablet\n///                   // larger breakpoints will be ignored\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#adding-custom-breakpoints Full documentation and examples\n$mq-static-breakpoint: desktop !default;\n\n/// Show breakpoints in the top right corner\n///\n/// If you want to display the currently active breakpoint in the top\n/// right corner of your site during development, add the breakpoints\n/// to this list, ordered by width. For example: (mobile, tablet, desktop).\n///\n/// @example scss\n///   $mq-show-breakpoints: (mobile, tablet, desktop);\n///   @import 'path/to/mq';\n///\n/// @type map\n$mq-show-breakpoints: () !default;\n\n/// Customize the media type (for example: `@media screen` or `@media print`)\n/// By default sass-mq uses an \"all\" media type (`@media all and …`)\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and examples\n$mq-media-type: all !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n/// @ignore @param {Number} $base-font-size [$mq-base-font-size] - `<body>` font size (deprecated)\n///\n/// @example scss\n///  $font-size-in-ems: mq-px2em(16px);\n///  p { font-size: mq-px2em(16px); }\n///\n/// @requires $mq-base-font-size\n/// @returns {Number}\n@function mq-px2em($px, $base-font-size: $mq-base-font-size) {\n    @if ($mq-base-font-size != 16px) {\n        @warn \"Overriding $mq-base-font-size will break things, see https://github.com/sass-mq/sass-mq/issues/122.\";\n    }\n    @if ($base-font-size != 16px) {\n        @warn \"The $base-font-size argument will be removed in sass-mq v6.0.0, as overriding it breaks things, see https://github.com/sass-mq/sass-mq/issues/122.\";\n    }\n    @if unitless($px) {\n        @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n        @return mq-px2em($px * 1px, $base-font-size);\n    } @else if unit($px) == em {\n        @return $px;\n    }\n    @return ($px / $base-font-size) * 1em;\n}\n\n/// Get a breakpoint's width\n///\n/// @param {String} $name - Name of the breakpoint. One of $mq-breakpoints\n///\n/// @example scss\n///  $tablet-width: mq-get-breakpoint-width(tablet);\n///  @media (min-width: mq-get-breakpoint-width(desktop)) {}\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @returns {Number} Value in pixels\n@function mq-get-breakpoint-width($name, $breakpoints: $mq-breakpoints) {\n    @if map-has-key($breakpoints, $name) {\n        @return map-get($breakpoints, $name);\n    } @else {\n        @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    }\n}\n\n/// Media Query mixin\n///\n/// @param {String | Boolean} $from [false] - One of $mq-breakpoints\n/// @param {String | Boolean} $until [false] - One of $mq-breakpoints\n/// @param {String | Boolean} $and [false] - Additional media query parameters\n/// @param {String} $media-type [$mq-media-type] - Media type: screen, print…\n///\n/// @ignore Undocumented API, for advanced use only:\n/// @ignore @param {Map} $breakpoints [$mq-breakpoints]\n/// @ignore @param {String} $static-breakpoint [$mq-static-breakpoint]\n///\n/// @content styling rules, wrapped into a @media query when $responsive is true\n///\n/// @requires {Variable} $mq-media-type\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-static-breakpoint\n/// @requires {function} mq-px2em\n/// @requires {function} mq-get-breakpoint-width\n///\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples\n///\n/// @example scss\n///  .element {\n///    @include mq($from: mobile) {\n///      color: red;\n///    }\n///    @include mq($until: tablet) {\n///      color: blue;\n///    }\n///    @include mq(mobile, tablet) {\n///      color: green;\n///    }\n///    @include mq($from: tablet, $and: '(orientation: landscape)') {\n///      color: teal;\n///    }\n///    @include mq(950px) {\n///      color: hotpink;\n///    }\n///    @include mq(tablet, $media-type: screen) {\n///      color: hotpink;\n///    }\n///    // Advanced use:\n///    $my-breakpoints: (L: 900px, XL: 1200px);\n///    @include mq(L, $breakpoints: $my-breakpoints, $static-breakpoint: L) {\n///      color: hotpink;\n///    }\n///  }\n@mixin mq(\n    $from: false,\n    $until: false,\n    $and: false,\n    $media-type: $mq-media-type,\n    $breakpoints: $mq-breakpoints,\n    $responsive: $mq-responsive,\n    $static-breakpoint: $mq-static-breakpoint\n) {\n    $min-width: 0;\n    $max-width: 0;\n    $media-query: '';\n\n    // From: this breakpoint (inclusive)\n    @if $from {\n        @if type-of($from) == number {\n            $min-width: mq-px2em($from);\n        } @else {\n            $min-width: mq-px2em(mq-get-breakpoint-width($from, $breakpoints));\n        }\n    }\n\n    // Until: that breakpoint (exclusive)\n    @if $until {\n        @if type-of($until) == number {\n            $max-width: mq-px2em($until);\n        } @else {\n            $max-width: mq-px2em(mq-get-breakpoint-width($until, $breakpoints)) - .01em;\n        }\n    }\n\n    // Responsive support is disabled, rasterize the output outside @media blocks\n    // The browser will rely on the cascade itself.\n    @if $responsive == false {\n        $static-breakpoint-width: mq-get-breakpoint-width($static-breakpoint, $breakpoints);\n        $target-width: mq-px2em($static-breakpoint-width);\n\n        // Output only rules that start at or span our target width\n        @if (\n            $and == false\n            and $min-width <= $target-width\n            and (\n                $until == false or $max-width >= $target-width\n            )\n            and $media-type != 'print'\n        ) {\n            @content;\n        }\n    }\n\n    // Responsive support is enabled, output rules inside @media queries\n    @else {\n        @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }\n        @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }\n        @if $and            { $media-query: '#{$media-query} and #{$and}'; }\n\n        // Remove unnecessary media query prefix 'all and '\n        @if ($media-type == 'all' and $media-query != '') {\n            $media-type: '';\n            $media-query: str-slice(unquote($media-query), 6);\n        }\n\n        @media #{$media-type + $media-query} {\n            @content;\n        }\n    }\n}\n\n/// Quick sort\n///\n/// @author Sam Richards\n/// @access private\n/// @param {List} $list - List to sort\n/// @returns {List} Sorted List\n@function _mq-quick-sort($list) {\n    $less:  ();\n    $equal: ();\n    $large: ();\n\n    @if length($list) > 1 {\n        $seed: nth($list, ceil(length($list) / 2));\n\n        @each $item in $list {\n            @if ($item == $seed) {\n                $equal: append($equal, $item);\n            } @else if ($item < $seed) {\n                $less: append($less, $item);\n            } @else if ($item > $seed) {\n                $large: append($large, $item);\n            }\n        }\n\n        @return join(join(_mq-quick-sort($less), $equal), _mq-quick-sort($large));\n    }\n\n    @return $list;\n}\n\n/// Sort a map by values (works with numbers only)\n///\n/// @access private\n/// @param {Map} $map - Map to sort\n/// @returns {Map} Map sorted by value\n@function _mq-map-sort-by-value($map) {\n    $map-sorted: ();\n    $map-keys: map-keys($map);\n    $map-values: map-values($map);\n    $map-values-sorted: _mq-quick-sort($map-values);\n\n    // Reorder key/value pairs based on key values\n    @each $value in $map-values-sorted {\n        $index: index($map-values, $value);\n        $key: nth($map-keys, $index);\n        $map-sorted: map-merge($map-sorted, ($key: $value));\n\n        // Unset the value in $map-values to prevent the loop\n        // from finding the same index twice\n        $map-values: set-nth($map-values, $index, 0);\n    }\n\n    @return $map-sorted;\n}\n\n/// Add a breakpoint\n///\n/// @param {String} $name - Name of the breakpoint\n/// @param {Number} $width - Width of the breakpoint\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @example scss\n///  @include mq-add-breakpoint(tvscreen, 1920px);\n///  @include mq(tvscreen) {}\n@mixin mq-add-breakpoint($name, $width) {\n    $new-breakpoint: ($name: $width);\n    $mq-breakpoints: map-merge($mq-breakpoints, $new-breakpoint) !global;\n    $mq-breakpoints: _mq-map-sort-by-value($mq-breakpoints) !global;\n}\n\n/// Show the active breakpoint in the top right corner of the viewport\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint\n///\n/// @param {List} $show-breakpoints [$mq-show-breakpoints] - List of breakpoints to show in the top right corner\n/// @param {Map} $breakpoints [$mq-breakpoints] - Breakpoint names and sizes\n///\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-show-breakpoints\n///\n/// @example scss\n///  // Show breakpoints using global settings\n///  @include mq-show-breakpoints;\n///\n///  // Show breakpoints using custom settings\n///  @include mq-show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));\n@mixin mq-show-breakpoints($show-breakpoints: $mq-show-breakpoints, $breakpoints: $mq-breakpoints) {\n    body:before {\n        background-color: #FCF8E3;\n        border-bottom: 1px solid #FBEED5;\n        border-left: 1px solid #FBEED5;\n        color: #C09853;\n        font: small-caption;\n        padding: 3px 6px;\n        pointer-events: none;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 100;\n\n        // Loop through the breakpoints that should be shown\n        @each $show-breakpoint in $show-breakpoints {\n            $width: mq-get-breakpoint-width($show-breakpoint, $breakpoints);\n            @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n                content: \"#{$show-breakpoint} ≥ #{$width} (#{mq-px2em($width)})\";\n            }\n        }\n    }\n}\n\n@if length($mq-show-breakpoints) > 0 {\n    @include mq-show-breakpoints;\n}\n","/*---------------------------\n      Icons\n---------------------------*/\n","\n/* Buttons CSS */\n\n/*Category Button*/\n\n","\n//Navigation Common\n\n.nav-item:hover .dropdown-menu:not(.show) {\n\tdisplay: block;\n}\n\n.custom-logo-link {\n\timg {\n\t\tmax-width: 150px;\n\t}\n}\n\n//Footer Navigation\n.footer-nav {\n\n    background-color: $light-dark-background;\n\tcursor: default;\n\n\ta {\n\t\tcolor: inherit;\n\t\ttext-decoration: none;\n\t}\n\n\t.footer-social {\n\t\tbackground-color: $purple-social;\n\t}\n\n\t.footer-separator {\n\t\twidth: 60px;\n\t\tbackground-color: $theme-primary;\n\t\theight: 2px;\n\t}\n\n\t.footer-copyright {\n\t\tbackground-color: $black-background;\n\t}\n}","\r\n//404 Error Page CSS\r\n\r\n.error-page {\r\n    text-align: center;\r\n\tbackground: $white-text;\r\n\tborder-top: 1px solid $white-text;\r\n\r\n    .error-inner {\r\n        display: inline-block;\r\n\r\n        h1 {\r\n            font-size: 140px;\r\n\t        text-shadow: 3px 5px 2px $shadow-color;\r\n\t        color: $theme-primary;\r\n\t        font-weight: 700;\r\n\r\n            span {\r\n                display: block;\r\n\t            font-size: 25px;\r\n\t            color: $light-dark-background;\r\n\t            font-weight: 600;\r\n\t            text-shadow: none;\r\n            }\r\n        }\r\n\r\n        p {\r\n            padding: 20px 15px;\r\n        }\r\n    }\r\n}\r\n\r\n//Back to Home Button\r\n.error-back {\r\n    background-color: $theme-primary;\r\n    border: none;\r\n    color: $white-text;\r\n    border-radius: 8px;\r\n    margin: 30px 0px 30px 0px;\r\n    padding: 14px 40px;\r\n    box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19);\r\n\r\n    &:hover, &:active {\r\n        background-color: $theme-primary-dark;\r\n        box-shadow: 0 12px 16px 0 rgba(0,0,0,0.24), 0 17px 50px 0 rgba(0,0,0,0.19);\r\n    }\r\n}","/* Entry meta */\n.updated:not(.published) {\n    display: none;\n}\n",".post-card-title {\n\t@include mq( medium ) {\n\t\theight: 62px;\n\t}\n}\n","/* Pagination \n.page-numbers.current > span {\n    background-color: rgb(25, 139, 231);\n    color: white;\n}*/"],"names":[],"sourceRoot":""}