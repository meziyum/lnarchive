{"version":3,"file":"css/main.css","mappings":";;;AAAA;;CCEC;ACFD;;CDKC;AELD;;;;EFUE;AGVF;EACC,SAAS;EDuBL,eDoEa;ECnEb,gBDoEc;EEzFlB,mBJWwB;EIVxB,qBAAqB;EC4Od;IDjPR;MDoBM,eD4EY;MC3EZ,gBD4Ea,IE3FlB;EC2OO;IDjPR;MDoBM,eDgFY;MC/EZ,gBDgFa,IE/FlB;;AAED;EACI,yBJMqB;EILrB,0BAA0B;EAC7B,iBAAiB;;AAGlB;EACC,YAAY;EACZ,cAAc;EACd,WAAW;;AAGZ;EACC,uBAAuB;EACpB,kBAAkB;EACrB,YAAY;EACZ,oBAAoB;EACpB,kBAAkB;EAClB,mBAAmB;EACnB,uBAAuB;EAPxB;IAUE,YAAY;IACZ,gCAAgC;IAXlC;MAaG,YAAY;;AAMf;EACI,mBAAmB;;AAMvB;EDtBK,eDhBa;ECiBb,gBDhBc;EGwOX;IDnMR;MD1BM,eDRY;MCSZ,gBDRa,IEmClB;ECiMO;IDnMR;MD1BM,eDJY;MCKZ,gBDJa,IE+BlB;;AAED;ED1BK,eDFa;ECGb,gBDFc;EG0NX;ID/LR;MD9BM,eDMY;MCLZ,gBDMa,IEyBlB;EC6LO;ID/LR;MD9BM,eDUY;MCTZ,gBDUa,IEqBlB;;AAED;ED9BK,eDYa;ECXb,gBDYc;EG4MX;ID3LR;MDlCM,eDoBY;MCnBZ,gBDoBa,IEelB;ECyLO;ID3LR;MDlCM,eDwBY;MCvBZ,gBDwBa,IEWlB;;AAED;EDlCK,eD0Ba;ECzBb,gBD0Bc;EG8LX;IDvLR;MDtCM,eDkCY;MCjCZ,gBDkCa,IEKlB;ECqLO;IDvLR;MDtCM,eDsCY;MCrCZ,gBDsCa,IEClB;;AAED;EDtCK,eDwCa;ECvCb,gBDwCc;EGgLX;IDnLR;MD1CM,eDgDY;MC/CZ,gBDgDa,IELlB;ECiLO;IDnLR;MD1CM,eDoDY;MCnDZ,gBDoDa,IETlB;;AAED;ED1CK,eDsDa;ECrDb,gBDsDc;EGkKX;ID/KR;MD9CM,eD8DY;MC7DZ,gBD8Da,IEflB;EC6KO;ID/KR;MD9CM,eDkEY;MCjEZ,gBDkEa,IEnBlB;;AAED;;;;;;EAMC,wBAAwB;EACxB,kCAAkC;;AE7EnC;;4BLwI4B;AMtI5B;EACI,gBAAgB;EAChB,eAA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","sources":["webpack://lnpedia/./src/sass/0-settings/_colors.scss","webpack://lnpedia/./src/sass/main.scss","webpack://lnpedia/./src/sass/0-settings/_typography.scss","webpack://lnpedia/./src/sass/1-tools/_mixins.scss","webpack://lnpedia/./src/sass/2-generic/_elements.scss","webpack://lnpedia/./node_modules/sass-mq/_mq.scss","webpack://lnpedia/./src/sass/2-generic/_icons.scss","webpack://lnpedia/./src/sass/2-generic/_buttons.scss","webpack://lnpedia/./src/sass/4-layouts/_main.scss","webpack://lnpedia/./src/sass/4-layouts/_nav.scss","webpack://lnpedia/./src/sass/4-layouts/_error.scss","webpack://lnpedia/./src/sass/4-layouts/_post.scss","webpack://lnpedia/./src/sass/4-layouts/_novel.scss","webpack://lnpedia/./src/sass/4-layouts/posts/_meta.scss"],"sourcesContent":["/**\n* Color Definitions\n*/\n\n$theme-primary: #387ef2;\n$theme-primary-dark: #3344d9;\n\n$not-imp: #9e9fad;\n\n$bright-green: #4CAF50;\n$dark-green: #3e8342;\n\n$purple-social: #6351ce;\n$purple-social-dark: #6b00b3;\n\n$main-background: #edf1f5;\n$light-dark-background: #1d2327;\n$black-background: #171C1F;\n\n$white-text: #ffffff;\n$grey-text: #1d2327;\n\n$shadow-color: #3333;\n$shadow-color-hover: #00000033;\n","// Essentials.\n@import \"essentials\";\n\n// Generic\n@import \"2-generic/generic\";\n\n//Import the Folders\n@import \"4-layouts/layouts\";\n","/**\n* Topography Definitions\n*/\n\n//Text Topography\n$body-text: (\n\t\"h1\": ( //H1 Heading\n\t\t\"small\": (\n\t\t\tfont-size: 26px,\n\t\t\tline-height: 1.4,\n\t\t),\n\t\t\"medium\": (\n\t\t\tfont-size: 28px,\n\t\t\tline-height: 1.5,\n\t\t),\n\t\t\"large\": (\n\t\t\tfont-size: 30px,\n\t\t\tline-height: 1.5,\n\t\t),\n\t),\n\t\"h2\": ( //H2 Heading\n\t\t\"small\": (\n\t\t\tfont-size: 22px,\n\t\t\tline-height: 1.4,\n\t\t),\n\t\t\"medium\": (\n\t\t\tfont-size: 24px,\n\t\t\tline-height: 1.5,\n\t\t),\n\t\t\"large\": (\n\t\t\tfont-size: 26px,\n\t\t\tline-height: 1.5,\n\t\t),\n\t),\n\t\"h3\": ( //H3 Heading\n\t\t\"small\": (\n\t\t\tfont-size: 18px,\n\t\t\tline-height: 1.4,\n\t\t),\n\t\t\"medium\": (\n\t\t\tfont-size: 20px,\n\t\t\tline-height: 1.5,\n\t\t),\n\t\t\"large\": (\n\t\t\tfont-size: 22px,\n\t\t\tline-height: 1.5,\n\t\t),\n\t),\n\t\"h4\": ( //H4 Heading\n\t\t\"small\": (\n\t\t\tfont-size: 16px,\n\t\t\tline-height: 1.4,\n\t\t),\n\t\t\"medium\": (\n\t\t\tfont-size: 18px,\n\t\t\tline-height: 1.5,\n\t\t),\n\t\t\"large\": (\n\t\t\tfont-size: 20px,\n\t\t\tline-height: 1.5,\n\t\t),\n\t),\n\t\"h5\": ( //H5 Heading\n\t\t\"small\": (\n\t\t\tfont-size: 14px,\n\t\t\tline-height: 1.4,\n\t\t),\n\t\t\"medium\": (\n\t\t\tfont-size: 16px,\n\t\t\tline-height: 1.5,\n\t\t),\n\t\t\"large\": (\n\t\t\tfont-size: 18px,\n\t\t\tline-height: 1.5,\n\t\t),\n\t),\n\t\"h6\": ( //H6 Heading\n\t\t\"small\": (\n\t\t\tfont-size: 12px,\n\t\t\tline-height: 1.4,\n\t\t),\n\t\t\"medium\": (\n\t\t\tfont-size: 14px,\n\t\t\tline-height: 1.5,\n\t\t),\n\t\t\"large\": (\n\t\t\tfont-size: 16px,\n\t\t\tline-height: 1.5,\n\t\t),\n\t),\n\t\"body\": ( //Body Content size\n\t\t\"small\": ( //Small Screen Size\n\t\t\tfont-size: 16px,\n\t\t\tline-height: 1.4,\n\t\t),\n\t\t\"medium\": ( //Medium Screen Size\n\t\t\tfont-size: 16px,\n\t\t\tline-height: 1.4,\n\t\t),\n\t\t\"large\": ( //Large Screen Size\n\t\t\tfont-size: 18px,\n\t\t\tline-height: 1.5,\n\t\t),\n\t),\n);\n","/**\n * Add font scale with media query as per configuration on $body-text\n * Ex: @include body-text( h1 );\n * This will add font-size and line-height with different breakpoints.\n */\n \n@mixin body-text( $level: normal, $body-text: $body-text, $device-size: false ) {\n\t@if type-of($body-text) != \"map\" {\n\t\t@error \"`#{$body-text}` is not a valid value for $values. It must be a list.\";\n\t}\n\n\t$size: map_get($body-text, $level);\n\n\t@if type-of($size) == \"map\" {\n\n\t\t@if $device-size == false {\n\t\t\t@each $device, $values in $size {\n\n\t\t\t\t@if $device != \"small\" {\n\t\t\t\t\t@include mq($from: $device) {\n\t\t\t\t\t\tfont-size: map_get($values, \"font-size\");\n\t\t\t\t\t\tline-height: map_get($values, \"line-height\");\n\t\t\t\t\t}\n\t\t\t\t} @else {\n\t\t\t\t\tfont-size: map_get($values, \"font-size\");\n\t\t\t\t\tline-height: map_get($values, \"line-height\");\n\t\t\t\t}\n\t\t\t}\n\t\t} @else {\n\t\t\t$device_values: map_get($size, $device-size);\n\n\t\t\tfont-size: map_get($device_values, \"font-size\");\n\t\t\tline-height: map_get($device_values, \"line-height\");\n\t\t}\n\t}\n}\n\n//Breakpoints Mixin\n@mixin respond-to($breakpoint) {\n\t@if map-has-key($mq-breakpoints, $breakpoint) { // If the key exists in the map\n\t  @media (min-width: map-get($mq-breakpoints, $breakpoint)) { // Prints a media query based on the value\n\t\t@content;\n\t  }\n\t}\n\t@else { // If the key doesn't exist in the map\n\t  @warn \"Unfortunately, no value could be retrieved from `#{$breakpoint}`. \"\n\t\t  + \"Available breakpoints are: #{map-keys($mq-breakpoints)}.\";\n\t}\n}","body {\n\tmargin: 0; //Remove Margin\n\t@include body-text( body );\n\n\tbackground: $main-background; //Primary Background Color\n\tword-wrap: break-word; //Break word when overflow\n}\n\nmain { //Main Element\n    background-color: $main-background; //Main Background Color\n    padding: 8px 12px 8px 12px; //Padding for the Main\n\tmin-height: 450px; //Min Body height in case of empty content\n}\n\nimg { //Image Element\n\theight: auto; //Auto Resize Image height\n\tdisplay: block;\n\twidth: 100%; //Full Div Width\n}\n\nbutton { //Button Element\n\tmargin: 4px 4px 4px 4px;\n    border-radius: 8px;\n\tborder: none;\n\tdisplay: inline-flex;\n\ttext-align: center;\n\talign-items: center;\n\tjustify-content: center;\n\n\ta{\n\t\tcolor: white;\n\t\ttext-decoration: none !important;\n\t\t&:hover,&:active {\n\t\t\tcolor: white;\n\t\t}\n\t}\n}\n\n//Table\ntable td, table td *, table th, table th * {\n    vertical-align: top;\n}\n\n\n//Topography\n\nh1 {\n\t@include body-text( h1 )\n}\n\nh2 {\n\t@include body-text( h2 )\n}\n\nh3 {\n\t@include body-text( h3 )\n}\n\nh4 {\n\t@include body-text( h4 )\n}\n\nh5 {\n\t@include body-text( h5 )\n}\n\nh6 {\n\t@include body-text( h6 )\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n\tmargin: 0px 0px 12px 0px;\n\ttext-rendering: optimizelegibility;\n}","@charset \"UTF-8\"; // Fixes an issue where Ruby locale is not set properly\n                  // See https://github.com/sass-mq/sass-mq/pull/10\n\n/// Base font size on the `<body>` element\n///\n/// Do not override this value, or things will break\n///\n/// @link https://github.com/sass-mq/sass-mq/issues/122\n/// @deprecated This setting will be removed in sass-mq v6.0.0\n/// @access private\n/// @type Number (unit)\n$mq-base-font-size: 16px !default;\n\n/// Responsive mode\n///\n/// Set to `false` to enable support for browsers that do not support @media queries,\n/// (IE <= 8, Firefox <= 3, Opera <= 9)\n///\n/// You could create a stylesheet served exclusively to older browsers,\n/// where @media queries are rasterized\n///\n/// @example scss\n///  // old-ie.scss\n///  $mq-responsive: false;\n///  @import 'main'; // @media queries in this file will be rasterized up to $mq-static-breakpoint\n///                   // larger breakpoints will be ignored\n///\n/// @type Boolean\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-off Disabled responsive mode documentation\n$mq-responsive: true !default;\n\n/// Breakpoint list\n///\n/// Name your breakpoints in a way that creates a ubiquitous language\n/// across team members. It will improve communication between\n/// stakeholders, designers, developers, and testers.\n///\n/// @type Map\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples\n$mq-breakpoints: (\n    mobile:  320px,\n    tablet:  740px,\n    desktop: 980px,\n    wide:    1300px\n) !default;\n\n/// Static breakpoint (for fixed-width layouts)\n///\n/// Define the breakpoint from $mq-breakpoints that should\n/// be used as the target width for the fixed-width layout\n/// (i.e. when $mq-responsive is set to 'false') in a old-ie.scss\n///\n/// @example scss\n///  // tablet-only.scss\n///  //\n///  // Ignore all styles above tablet breakpoint,\n///  // and fix the styles (such as the layout) at tablet width\n///  $mq-responsive: false;\n///  $mq-static-breakpoint: tablet;\n///  @import 'main'; // @media queries in this file will be rasterized up to tablet\n///                   // larger breakpoints will be ignored\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#adding-custom-breakpoints Full documentation and examples\n$mq-static-breakpoint: desktop !default;\n\n/// Show breakpoints in the top right corner\n///\n/// If you want to display the currently active breakpoint in the top\n/// right corner of your site during development, add the breakpoints\n/// to this list, ordered by width. For example: (mobile, tablet, desktop).\n///\n/// @example scss\n///   $mq-show-breakpoints: (mobile, tablet, desktop);\n///   @import 'path/to/mq';\n///\n/// @type map\n$mq-show-breakpoints: () !default;\n\n/// Customize the media type (for example: `@media screen` or `@media print`)\n/// By default sass-mq uses an \"all\" media type (`@media all and …`)\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and examples\n$mq-media-type: all !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n/// @ignore @param {Number} $base-font-size [$mq-base-font-size] - `<body>` font size (deprecated)\n///\n/// @example scss\n///  $font-size-in-ems: mq-px2em(16px);\n///  p { font-size: mq-px2em(16px); }\n///\n/// @requires $mq-base-font-size\n/// @returns {Number}\n@function mq-px2em($px, $base-font-size: $mq-base-font-size) {\n    @if ($mq-base-font-size != 16px) {\n        @warn \"Overriding $mq-base-font-size will break things, see https://github.com/sass-mq/sass-mq/issues/122.\";\n    }\n    @if ($base-font-size != 16px) {\n        @warn \"The $base-font-size argument will be removed in sass-mq v6.0.0, as overriding it breaks things, see https://github.com/sass-mq/sass-mq/issues/122.\";\n    }\n    @if unitless($px) {\n        @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n        @return mq-px2em($px * 1px, $base-font-size);\n    } @else if unit($px) == em {\n        @return $px;\n    }\n    @return ($px / $base-font-size) * 1em;\n}\n\n/// Get a breakpoint's width\n///\n/// @param {String} $name - Name of the breakpoint. One of $mq-breakpoints\n///\n/// @example scss\n///  $tablet-width: mq-get-breakpoint-width(tablet);\n///  @media (min-width: mq-get-breakpoint-width(desktop)) {}\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @returns {Number} Value in pixels\n@function mq-get-breakpoint-width($name, $breakpoints: $mq-breakpoints) {\n    @if map-has-key($breakpoints, $name) {\n        @return map-get($breakpoints, $name);\n    } @else {\n        @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    }\n}\n\n/// Media Query mixin\n///\n/// @param {String | Boolean} $from [false] - One of $mq-breakpoints\n/// @param {String | Boolean} $until [false] - One of $mq-breakpoints\n/// @param {String | Boolean} $and [false] - Additional media query parameters\n/// @param {String} $media-type [$mq-media-type] - Media type: screen, print…\n///\n/// @ignore Undocumented API, for advanced use only:\n/// @ignore @param {Map} $breakpoints [$mq-breakpoints]\n/// @ignore @param {String} $static-breakpoint [$mq-static-breakpoint]\n///\n/// @content styling rules, wrapped into a @media query when $responsive is true\n///\n/// @requires {Variable} $mq-media-type\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-static-breakpoint\n/// @requires {function} mq-px2em\n/// @requires {function} mq-get-breakpoint-width\n///\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples\n///\n/// @example scss\n///  .element {\n///    @include mq($from: mobile) {\n///      color: red;\n///    }\n///    @include mq($until: tablet) {\n///      color: blue;\n///    }\n///    @include mq(mobile, tablet) {\n///      color: green;\n///    }\n///    @include mq($from: tablet, $and: '(orientation: landscape)') {\n///      color: teal;\n///    }\n///    @include mq(950px) {\n///      color: hotpink;\n///    }\n///    @include mq(tablet, $media-type: screen) {\n///      color: hotpink;\n///    }\n///    // Advanced use:\n///    $my-breakpoints: (L: 900px, XL: 1200px);\n///    @include mq(L, $breakpoints: $my-breakpoints, $static-breakpoint: L) {\n///      color: hotpink;\n///    }\n///  }\n@mixin mq(\n    $from: false,\n    $until: false,\n    $and: false,\n    $media-type: $mq-media-type,\n    $breakpoints: $mq-breakpoints,\n    $responsive: $mq-responsive,\n    $static-breakpoint: $mq-static-breakpoint\n) {\n    $min-width: 0;\n    $max-width: 0;\n    $media-query: '';\n\n    // From: this breakpoint (inclusive)\n    @if $from {\n        @if type-of($from) == number {\n            $min-width: mq-px2em($from);\n        } @else {\n            $min-width: mq-px2em(mq-get-breakpoint-width($from, $breakpoints));\n        }\n    }\n\n    // Until: that breakpoint (exclusive)\n    @if $until {\n        @if type-of($until) == number {\n            $max-width: mq-px2em($until);\n        } @else {\n            $max-width: mq-px2em(mq-get-breakpoint-width($until, $breakpoints)) - .01em;\n        }\n    }\n\n    // Responsive support is disabled, rasterize the output outside @media blocks\n    // The browser will rely on the cascade itself.\n    @if $responsive == false {\n        $static-breakpoint-width: mq-get-breakpoint-width($static-breakpoint, $breakpoints);\n        $target-width: mq-px2em($static-breakpoint-width);\n\n        // Output only rules that start at or span our target width\n        @if (\n            $and == false\n            and $min-width <= $target-width\n            and (\n                $until == false or $max-width >= $target-width\n            )\n            and $media-type != 'print'\n        ) {\n            @content;\n        }\n    }\n\n    // Responsive support is enabled, output rules inside @media queries\n    @else {\n        @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }\n        @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }\n        @if $and            { $media-query: '#{$media-query} and #{$and}'; }\n\n        // Remove unnecessary media query prefix 'all and '\n        @if ($media-type == 'all' and $media-query != '') {\n            $media-type: '';\n            $media-query: str-slice(unquote($media-query), 6);\n        }\n\n        @media #{$media-type + $media-query} {\n            @content;\n        }\n    }\n}\n\n/// Quick sort\n///\n/// @author Sam Richards\n/// @access private\n/// @param {List} $list - List to sort\n/// @returns {List} Sorted List\n@function _mq-quick-sort($list) {\n    $less:  ();\n    $equal: ();\n    $large: ();\n\n    @if length($list) > 1 {\n        $seed: nth($list, ceil(length($list) / 2));\n\n        @each $item in $list {\n            @if ($item == $seed) {\n                $equal: append($equal, $item);\n            } @else if ($item < $seed) {\n                $less: append($less, $item);\n            } @else if ($item > $seed) {\n                $large: append($large, $item);\n            }\n        }\n\n        @return join(join(_mq-quick-sort($less), $equal), _mq-quick-sort($large));\n    }\n\n    @return $list;\n}\n\n/// Sort a map by values (works with numbers only)\n///\n/// @access private\n/// @param {Map} $map - Map to sort\n/// @returns {Map} Map sorted by value\n@function _mq-map-sort-by-value($map) {\n    $map-sorted: ();\n    $map-keys: map-keys($map);\n    $map-values: map-values($map);\n    $map-values-sorted: _mq-quick-sort($map-values);\n\n    // Reorder key/value pairs based on key values\n    @each $value in $map-values-sorted {\n        $index: index($map-values, $value);\n        $key: nth($map-keys, $index);\n        $map-sorted: map-merge($map-sorted, ($key: $value));\n\n        // Unset the value in $map-values to prevent the loop\n        // from finding the same index twice\n        $map-values: set-nth($map-values, $index, 0);\n    }\n\n    @return $map-sorted;\n}\n\n/// Add a breakpoint\n///\n/// @param {String} $name - Name of the breakpoint\n/// @param {Number} $width - Width of the breakpoint\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @example scss\n///  @include mq-add-breakpoint(tvscreen, 1920px);\n///  @include mq(tvscreen) {}\n@mixin mq-add-breakpoint($name, $width) {\n    $new-breakpoint: ($name: $width);\n    $mq-breakpoints: map-merge($mq-breakpoints, $new-breakpoint) !global;\n    $mq-breakpoints: _mq-map-sort-by-value($mq-breakpoints) !global;\n}\n\n/// Show the active breakpoint in the top right corner of the viewport\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint\n///\n/// @param {List} $show-breakpoints [$mq-show-breakpoints] - List of breakpoints to show in the top right corner\n/// @param {Map} $breakpoints [$mq-breakpoints] - Breakpoint names and sizes\n///\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-show-breakpoints\n///\n/// @example scss\n///  // Show breakpoints using global settings\n///  @include mq-show-breakpoints;\n///\n///  // Show breakpoints using custom settings\n///  @include mq-show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));\n@mixin mq-show-breakpoints($show-breakpoints: $mq-show-breakpoints, $breakpoints: $mq-breakpoints) {\n    body:before {\n        background-color: #FCF8E3;\n        border-bottom: 1px solid #FBEED5;\n        border-left: 1px solid #FBEED5;\n        color: #C09853;\n        font: small-caption;\n        padding: 3px 6px;\n        pointer-events: none;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 100;\n\n        // Loop through the breakpoints that should be shown\n        @each $show-breakpoint in $show-breakpoints {\n            $width: mq-get-breakpoint-width($show-breakpoint, $breakpoints);\n            @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n                content: \"#{$show-breakpoint} ≥ #{$width} (#{mq-px2em($width)})\";\n            }\n        }\n    }\n}\n\n@if length($mq-show-breakpoints) > 0 {\n    @include mq-show-breakpoints;\n}\n","/*---------------------------\n      Icons\n---------------------------*/\n","\n//Category Button\n.category-button {\n    padding: 4px 8px;\n    font-size: 12px;\n    background-color: $bright-green;\n\n    &:hover, \n    &:active {\n        background-color: $dark-green;\n    }\n}\n\n//Genre Button\n.genre-button,\n.post-tag-button {\n    padding: 4px 8px;\n    font-size: 12px;\n    background-color: $theme-primary;\n\n    &:hover, \n    &:active {\n        background-color: $theme-primary-dark;\n    }\n}\n\n//Series Button\n.series-button {\n    padding: 4px 8px;\n    font-size: 12px;\n    background-color: $theme-primary;\n\n    &:hover, \n    &:active {\n        background-color: $theme-primary-dark;\n    }\n}\n\n//Pagination Mixin\n.pagination-button {\n    padding: 8px 8px;\n    color: $white-text;\n    font-size: 16px;\n    height: 32px;\n    width: 32px;\n    border-radius: 50%;\n}\n\n//Post Page Navigation Button\n.page-links {\n\n    .post-page-numbers {\n        button{\n            background-color: $theme-primary;\n\n            &:active,\n            &:hover {\n                background-color: $theme-primary-dark;\n            }\n        }\n    }\n\n    .current {\n        button {\n            background-color: $theme-primary-dark;\n        }\n    }\n}\n\n//Blog Pagination\n.blog-links {\n\n    .blog-page-no,\n    .blog-page-prev,\n    .blog-page-next {\n        background-color: $theme-primary;\n\n        &:active,\n        &:hover {\n            background-color: $theme-primary-dark;\n        }\n    }\n\n    .current{\n        .blog-page-no{\n            background-color: $theme-primary-dark;\n        }\n    }\n}\n\n//Next/Prev Button\n.prev-post,\n.next-post {\n    padding: 4px 8px;\n    font-size: 18px;\n    background-color: $theme-primary;\n\n    &:hover,\n    &:active {\n        background-color: $theme-primary-dark;\n    }\n}\n\n//Edit Button\n.edit-button {\n    padding: 4px 8px;\n    font-size: 12px;\n    background-color: $purple-social;\n\n    &:active,\n    &:hover {\n        background-color: $purple-social-dark;\n    }\n}\n","\r\n//Title\r\n.page-title {\r\n    color: $white-text;\r\n    background-color: $light-dark-background;\r\n    text-align: center;\r\n}\r\n\r\n//Sidebar\r\n.sidebar-wrap {\r\n    margin-left: 12px;\r\n}\r\n\r\n//Content and Sidebar Common\r\n.content-wrap,\r\n.sidebar-wrap {\r\n    padding: 16px;\r\n    border-radius: 8px;\r\n    background-color: $white-text;\r\n}","\n//Navigation Common\n\n.nav-item:hover .dropdown-menu:not(.show) {\n\tdisplay: block;\n}\n\n.custom-logo-link {\n\timg {\n\t\tmax-width: 112px;\n\t\tmax-height: 70px;\n\t}\n}\n\n//Header Navigation\n.header-nav {\n\n\t.profile-pic{\n\t\tborder-radius: 50%;\n\n\t\t@include respond-to( x-small ) {\n\t\t\tmax-width: 100px;\n\t\t\tmax-height: 100px;\n\t\t}\n\n\t\t@include respond-to( large ) {\n\t\t\tmax-width: 50px;\n\t\t\tmax-height: 50px;\n\t\t}\n\t\t\n\t}\t\n\t\n\t.nav-link {\n\t\tfont-weight: 500;\n\t\tcolor: $grey-text !important;\n\n\t\t&:hover, \n\t\t&:active {\n\t\t\t\n\t\t\tcolor: $theme-primary !important;\n\t\t}\n\t}\n}\n\n//Footer Navigation\n.footer-nav {\n\n    background-color: $light-dark-background;\n\tcursor: default;\n\n\ta {\n\t\tcolor: inherit;\n\t\ttext-decoration: none;\n\t}\n\n\t.footer-social {\n\t\tbackground-color: $purple-social;\n\t}\n\n\t.main-footer {\n\n\t\t.nav-link{\n\t\t\tfont-weight: 400;\n\t\t\tcolor: $white-text;\n\n\t\t\t&:hover, \n\t\t\t&:active {\n\t\t\t\tcolor: $theme-primary;\n\t\t\t}\n\t\t}\n\n\t\t.footer-separator {\n\t\t\twidth: 60px;\n\t\t\tbackground-color: $theme-primary;\n\t\t\theight: 2px;\n\t\t}\n\t}\n\n\t\n\n\t.footer-copyright {\n\t\tbackground-color: $black-background;\n\t}\n}","\r\n//404 Error Page CSS\r\n\r\n.error-page {\r\n    text-align: center;\r\n\tbackground: $white-text;\r\n\tborder-top: 1px solid $white-text;\r\n\r\n    .error-inner {\r\n        display: inline-block;\r\n\r\n        h1 {\r\n            font-size: 140px;\r\n\t        text-shadow: 3px 5px 2px $shadow-color;\r\n\t        color: $theme-primary;\r\n\t        font-weight: 700;\r\n\r\n            span {\r\n                display: block;\r\n\t            font-size: 25px;\r\n\t            color: $light-dark-background;\r\n\t            font-weight: 600;\r\n\t            text-shadow: none;\r\n            }\r\n        }\r\n\r\n        p {\r\n            padding: 20px 15px;\r\n        }\r\n    }\r\n}\r\n\r\n//Back to Home Button\r\n.error-back {\r\n    background-color: $theme-primary;\r\n    border: none;\r\n    color: $white-text;\r\n    border-radius: 8px;\r\n    margin: 32px 0px 32px 0px;\r\n    padding: 16px 40px;\r\n    box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19);\r\n\r\n    &:hover, &:active {\r\n        background-color: $theme-primary-dark;\r\n        box-shadow: 0 12px 16px 0 rgba(0,0,0,0.24), 0 17px 50px 0 rgba(0,0,0,0.19);\r\n    }\r\n}","\r\n//Blog Page\r\n.blog-entry {\r\n    background-color: $white-text;\r\n    box-shadow: 0 2px 5px $shadow-color;\r\n    margin-bottom: 16px;\r\n    position: relative;\r\n    top: 0;\r\n    transition: all .1s ease-in;\r\n    border-radius: 12px;\r\n    overflow: hidden;\r\n\r\n    .attachment-featured-img {\r\n        padding: 0px;\r\n        max-height: 200px;\r\n        object-fit: cover;\r\n    }\r\n\r\n    .blog-entry-info {\r\n        padding: 8px;\r\n\r\n        .blog-entry-title {\r\n            text-decoration: none;\r\n            color: $black-background;\r\n        }\r\n\r\n        .posted-on {\r\n            cursor: default;\r\n        }\r\n    }\r\n\r\n    &:hover, \r\n    &:active {\r\n        top: -2px;\r\n        box-shadow: 0 4px 5px $shadow-color-hover;\r\n    }\r\n}\r\n\r\n//Date\r\n.posted-on {\r\n    color: $not-imp;\r\n}\r\n\r\n//Pagination\r\n.page-numbers{\r\n    text-decoration: none;\r\n}","\r\n//Novel Common\r\n.novel-title {\r\n    a{\r\n        color: $black-background;\r\n        text-decoration: none;\r\n    }\r\n}\r\n\r\n//Novel Cover\r\n.novel-cover {\r\n    aspect-ratio: 4.1 / 5.8;\r\n}\r\n\r\n//Archive\r\n.archive-entry-col{\r\n    padding: 0px;\r\n\r\n    .archive-entry {\r\n        padding: 0px;\r\n        margin: 4px 8px;\r\n        border-radius: 8px;\r\n        position: relative;\r\n        box-shadow: 0 2px 5px $shadow-color;\r\n        top: 0;\r\n        transition: all .1s ease-in;\r\n        overflow: hidden;\r\n\r\n        &:hover, \r\n        &:active {\r\n            top: -2px;\r\n            box-shadow: 0 4px 5px $shadow-color-hover;\r\n        }\r\n    }\r\n}\r\n\r\n.info-section {\r\n    margin-bottom: 16px;\r\n\r\n    .novel-row {\r\n        margin: 0px;\r\n\r\n        .novel-cover-div {\r\n            background: white;\r\n            border-radius: 8px;\r\n            padding: 8px 12px 0px 12px;\r\n            \r\n            @include respond-to( small ) {\r\n                margin-right: 0px;\r\n                margin-bottom: 16px;\r\n            }\r\n\r\n            @include respond-to( medium) {\r\n                margin-right: 16px;\r\n                margin-bottom: 0px;\r\n            }\r\n\r\n            .novel-cover{\r\n                border-radius: 8px;\r\n                margin-bottom: 8px;\r\n            }\r\n        }\r\n\r\n        .novel-info {\r\n            background: white;\r\n            border-radius: 8px;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n.volumes-section {\r\n    background: $white-text;\r\n    border-radius: 8px;\r\n    padding: 4px;\r\n    margin-bottom: 16px;\r\n\r\n    h2{\r\n        margin: 8px;\r\n    }\r\n\r\n    .volume-list {\r\n        margin: 0px;\r\n\r\n        @include respond-to( x-small ){\r\n            flex-wrap: nowrap;\r\n            overflow-x: auto;\r\n        }\r\n\r\n        @include respond-to( medium ) {\r\n            flex-wrap: wrap;\r\n            overflow: auto;\r\n        }\r\n    }\r\n}\r\n\r\n.child-section {\r\n    background: $white-text;\r\n    border-radius: 8px;\r\n    padding: 4px;\r\n    margin-bottom: 16px;\r\n\r\n    h2{\r\n        margin: 8px;\r\n    }\r\n\r\n    .child-list {\r\n        margin: 0px;\r\n\r\n        @include respond-to( x-small ){\r\n            flex-wrap: nowrap;\r\n            overflow-x: auto;\r\n        }\r\n\r\n        @include respond-to( medium ) {\r\n            flex-wrap: wrap;\r\n            overflow: auto;\r\n        }\r\n    }\r\n}\r\n\r\n","/* Entry meta */\n.updated:not(.published) {\n    display: none;\n}\n"],"names":[],"sourceRoot":""}